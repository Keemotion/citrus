# A grammar for mathematical formulas that apply the basic four operations to
# non-negative numbers (integers and floats), respecting operator precedence and
# ignoring whitespace.
grammar Calc
  # If "term" were not already the first rule declared in this grammar, we
  # could use the following line to make it the root rule.
  #root term

  rule term
    (additive | factor) {
      def value
        first.value
      end
    }
  end

  rule additive
    (factor additive_op term) {
      def value
        if additive_op == '+'
          factor.value + term.value
        else
          factor.value - term.value
        end
      end
    }
  end

  rule factor
    (multiplicative | primary) {
      def value
        first.value
      end
    }
  end

  rule multiplicative
    (primary multiplicative_op factor) {
      def value
        if multiplicative_op == '*'
          primary.value * factor.value
        else
          primary.value / factor.value
        end
      end
    }
  end

  rule primary
    (term_paren | number) {
      def value
        first.value
      end
    }
  end

  rule term_paren
    ('(' term ')') {
      def value
        term.value
      end
    }
  end

  rule additive_op
    (plus | minus) {
      def ==(other)
        text.strip == other
      end
    }
  end

  rule multiplicative_op
    (star | slash) {
      def ==(other)
        text.strip == other
      end
    }
  end

  rule number
    (float | integer) {
      def value
        first.value
      end
    }
  end

  rule float
    (integer '.' integer space) {
      def value
        text.strip.to_f
      end
    }
  end

  rule integer
    ([0-9]+ space) {
      def value
        text.strip.to_i
      end
    }
  end

  rule lparen  '(' space  end
  rule rparen  ')' space  end
  rule plus    '+' space  end
  rule minus   '-' space  end
  rule star    '*' space  end
  rule slash   '/' space  end

  rule space
    [ \t\n\r]*
  end
end
